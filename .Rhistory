db$wireless<-as.factor(db$wireless)
db$wiremon<-as.factor(db$wiremon)
db$multline<-as.factor(db$multline)
db$voice<-as.factor(db$voice)
db$pager<-as.factor(db$pager)
db$internet<-as.factor(db$internet)
db$callid<-as.factor(db$callid)
db$forward<-as.factor(db$forward)
db$confer<-as.factor(db$confer)
db$owntv<-as.factor(db$owntv)
db$ownvcr<-as.factor(db$ownvcr)
db$owndvd<-as.factor(db$owndvd)
db$owncd<-as.factor(db$owncd)
db$ownpda<-as.factor(db$ownpda)
db$ownpc<-as.factor(db$ownpc)
db$ownipod<-as.factor(db$ownipod)
db$owngame<-as.factor(db$owngame)
db$ownfax<-as.factor(db$ownfax)
db$news<-as.factor(db$news)
db$card2fee<-as.factor(db$card2fee)
db$response_01<-as.factor(db$response_01)
db$response_02<-as.factor(db$response_02)
db$response_03<-as.factor(db$response_03)
db$polcontrib<-as.factor(db$polcontrib)
db$cardfee<-as.factor(db$cardfee)
db$commutecarpool<-as.factor(db$commutecarpool)
db$callwait<-as.factor(db$callwait)
plot_missing(db,missing_only = TRUE)
db<-db[, colMeans(is.na(db)) <= .2]
dim(db)
plot_missing(db,missing_only = TRUE)
db<-kNN(db)
db<-db%>%select(-ends_with("_imp")) #Para eliminar las columnas adicionales que se generan en la imputación
db$lujo_si<-ifelse(db$carcatvalue==3,1,0)
db$lujo_si<-as.factor(db$lujo_si)
write.csv(db,"db_clean.csv")
db_num<-db %>% dplyr::select(where(is.numeric))
db_cat<-db %>% dplyr::select(where(is.factor))
par(mfrow=c(2,2))
for (i in 1:ncol(db_num)){
hist(db_num[[i]], main=paste("Plot ", colnames(db_num[i])), xlab = paste("Values Plot",i))
box(lty = "solid")
}
ggplot(db,aes(x=carcatvalue,y=carvalue,color=carcatvalue))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
std_values<-ddply(db,"carcatvalue",summarise,Min=min(carvalue),Max=max(carvalue),Mean=mean(carvalue),sd=sd(carvalue))
ggplot(db,aes(x=carvalue,color=carcatvalue))+geom_histogram(fill="white",alpha=0.5,position = "identity")+
geom_vline(data = std_values,aes(xintercept=Mean,color=carcatvalue),linetype="dashed")+
theme(axis.text.x = element_text(angle = 90,size = 10))
db%>%group_by(lujo_si)%>%summarise(mean(age),median(age),mean(ed))
db_lujo<-db %>% filter(lujo_si==1)
gender_table<-count(db_lujo,"gender")
all_lujo<-sum(gender_table$freq)
gender_table$percentage<-(gender_table$freq/all_lujo)*100
marital_table<-count(db_lujo,"marital")
marital_table$percentage<-(marital_table$freq/all_lujo)*100
ggplot(gender_table,aes(x="", y=percentage ,fill=gender))+
geom_bar(stat="identity")+
coord_polar("y",start=0)+
theme_void()
gender_table
ggplot(marital_table,aes(x="", y=percentage ,fill=marital))+
geom_bar(stat="identity")+
coord_polar("y",start=0)+
theme_void()
marital_table
db%>%group_by(lujo_si)%>%summarise(mean(income),median(income),mean(employ),mean(creddebt))
#Se dividen los datos para entrenamiento (75% de train y 25% de test)
set.seed(88)
split=sample.split(db$lujo_si,SplitRatio = 0.75)
#Crear el training y testing data sets
dt=subset(db,split==TRUE)  #Train
de=subset(db,split==FALSE) #Test
RL_Eur<-glm(lujo_si~card2+income+tollfree+forward+ebill+cardspent+spoused+forward+pets_reptiles,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~cardtype+card2+income+tollfree+forward+ebill+cardspent+spoused+forward,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~cardtype+card2+income+tollfree+forward+ebill+cardspent+spoused+forward+jobsat,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~cardtype+card2+income+tollfree+forward+ebill+cardspent+spoused+forward+region,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~cardtype+card2+income+tollfree+forward+ebill+cardspent+spoused+forward+union,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~cardtype+card2+income+tollfree+forward+ebill+cardspent+spoused+forward+jobcat,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+employ,data=dt,family = binomial())
summary(RL_Eur)
car_prices<-readxl::read_excel("Scrapes")
car_prices<-readxl::read_excel("Scrapes.xlsx")
car_prices<-readxl::read_excel("Scrapes.xlsx")
head(car_prices)
ggplot(car_prices,aes(x="Price",y=Price))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
ggplot(car_prices,aes(x=Marca,y=Price),color=Marca)+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
ggplot(car_prices,aes(x=Marca,y=Price,color=Marca))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
car_prices<-readxl::read_excel("Scrapes.xlsx")
head(car_prices)
ggplot(car_prices,aes(x=Marca,y=Price,color=Marca))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
ggplot(car_prices,aes(x=Marca,y=Price,color=Marca))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
car_prices<-readxl::read_excel("Scrapes.xlsx")
head(car_prices)
ggplot(car_prices,aes(x=Marca,y=Price,color=Marca))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
car_prices%>%summarise(mean(Price),median(Price),min(Price),max(Price))
car_prices<-readxl::read_excel("Scrapes.xlsx")
head(car_prices)
dim(car_prices)
db%>%summarise(mean(carvalue),median(carvalue),min(carvalue),max(carvalue))
db[db$carcatvalue==3]%>%summarise(mean(carvalue),median(carvalue),min(carvalue),max(carvalue))
db[[db$carcatvalue]==3]%>%summarise(mean(carvalue),median(carvalue),min(carvalue),max(carvalue))
db[db$carcatvalue==3]%>%summarise(mean(carvalue),median(carvalue),min(carvalue),max(carvalue))
db%>% filter(lujo_si==1)%>%summarise(mean(carvalue),median(carvalue),min(carvalue),max(carvalue))
car_prices%>%summarise(mean(Price),median(Price),min(Price),max(Price))
db%>%group_by(lujo_si,pets_reptiles)%>%summarise(count=n())
cast(rept,pets_reptiles~lujo_si,value = "total")
rept<-db%>%group_by(lujo_si,pets_reptiles)%>%summarise(count=n())
cast(rept,pets_reptiles~lujo_si,value = "total")
rept<-db%>%group_by(lujo_si,pets_reptiles)%>%summarise(count=n())
cast(rept,pets_reptiles~lujo_si,value = "count")
card_tb<-db%>%group_by(lujo_si,cardspent)%>%summarise(count=n())
cast(card_tb,cardspent~lujo_si,value = "count")
card_tb<-db%>%group_by(lujo_si,cardtype)%>%summarise(count=n())
cast(card_tb,cardtype~lujo_si,value = "count")
card_tb<-db%>%group_by(lujo_si,cardtype)%>%summarise(count=n())
cast(card_tb,cardtype~lujo_si,value = "count")
db%>%group_by(lujo_si)%>%summarise(mean(income),mean(employ),mean(creddebt),mean(cardspent))
db%>%group_by(lujo_si)%>%summarise(mean(income),mean(employ),mean(creddebt),mean(cardspent),mean(ebill))
db%>%group_by(lujo_si)%>%summarise(mean(income),mean(employ),mean(creddebt),mean(cardspent))
db$ebill<-as.factor(db$ebill)
library(DataExplorer) #para datos faltantes
library(VIM) #para imputación de datos faltantes
library(dplyr) #Para la manipulación de bases de datos
library(caTools) #Para predicción de datos
library(VIM) #para imputación de datos faltantes
library(randomForest)
library(tibble)
library(ggplot2)
library(tidyverse)
library(viridis)
library(plyr)
library(heatmaply)
library(caret)
library(reshape)
db<-read.csv("Base de datos caso práctico.csv")
#View(db)
dim(db)
summary(db)
n_occur<-data.frame(table(db$custid))
n_occur[n_occur$Freq>1,]
db$region<-as.factor(db$region)
db$townsize<-as.factor(db$townsize)
db$gender<-as.factor(db$gender)
db$agecat<-as.factor(db$agecat)
db$edcat<-as.factor(db$edcat)
db$jobcat<-as.factor(db$jobcat)
db$union<-as.factor(db$union)
db$empcat<-as.factor(db$empcat)
db$retire<-as.factor(db$retire)
db$inccat<-as.factor(db$inccat)
db$default<-as.factor(db$default)
db$jobsat<-as.factor(db$jobsat)
db$marital<-as.factor(db$marital)
db$spousedcat<-as.factor(db$spousedcat)
db$homeown<-as.factor(db$homeown)
db$hometype<-as.factor(db$hometype)
db$addresscat<-as.factor(db$addresscat)
db$carown<-as.factor(db$carown)
db$cartype<-as.factor(db$cartype)
db$carcatvalue<-as.factor(db$carcatvalue)
db$carbought<-as.factor(db$carbought)
db$carbuy<-as.factor(db$carbuy)
db$carcatvalue<-as.factor(db$carcatvalue)
db$commute<-as.factor(db$commute)
db$commutecat<-as.factor(db$commutecat)
db$commutecar<-as.factor(db$commutecar)
db$commuterail<-as.factor(db$commuterail)
db$commutebus<-as.factor(db$commutebus)
db$commutemotorcycle<-as.factor(db$commutemotorcycle)
db$commutepublic<-as.factor(db$commutepublic)
db$commutebike<-as.factor(db$commutebike)
db$commutewalk<-as.factor(db$commutewalk)
db$commutenonmotor<-as.factor(db$commutenonmotor)
db$telecommute<-as.factor(db$telecommute)
db$reason<-as.factor(db$reason)
db$birthmonth<-as.factor(db$birthmonth)
db$polview<-as.factor(db$polview)
db$ebill<-as.factor(db$ebill)
db$polparty<-as.factor(db$polparty)
db$vote<-as.factor(db$vote)
db$card<-as.factor(db$card)
db$cardtype<-as.factor(db$cardtype)
db$cardbenefit<-as.factor(db$cardbenefit)
db$card2<-as.factor(db$card2)
db$card2type<-as.factor(db$card2type)
db$card2benefit<-as.factor(db$card2benefit)
db$active<-as.factor(db$active)
db$bfast<-as.factor(db$bfast)
db$churn<-as.factor(db$churn)
db$tollfree<-as.factor(db$tollfree)
db$equip<-as.factor(db$equip)
db$callcard<-as.factor(db$callcard)
db$wireless<-as.factor(db$wireless)
db$wiremon<-as.factor(db$wiremon)
db$multline<-as.factor(db$multline)
db$voice<-as.factor(db$voice)
db$pager<-as.factor(db$pager)
db$internet<-as.factor(db$internet)
db$callid<-as.factor(db$callid)
db$forward<-as.factor(db$forward)
db$confer<-as.factor(db$confer)
db$owntv<-as.factor(db$owntv)
db$ownvcr<-as.factor(db$ownvcr)
db$owndvd<-as.factor(db$owndvd)
db$owncd<-as.factor(db$owncd)
db$ownpda<-as.factor(db$ownpda)
db$ownpc<-as.factor(db$ownpc)
db$ownipod<-as.factor(db$ownipod)
db$owngame<-as.factor(db$owngame)
db$ownfax<-as.factor(db$ownfax)
db$news<-as.factor(db$news)
db$card2fee<-as.factor(db$card2fee)
db$response_01<-as.factor(db$response_01)
db$response_02<-as.factor(db$response_02)
db$response_03<-as.factor(db$response_03)
db$polcontrib<-as.factor(db$polcontrib)
db$cardfee<-as.factor(db$cardfee)
db$commutecarpool<-as.factor(db$commutecarpool)
db$callwait<-as.factor(db$callwait)
db$ebill<-as.factor(db$ebill)
plot_missing(db,missing_only = TRUE)
db<-db[, colMeans(is.na(db)) <= .2]
dim(db)
plot_missing(db,missing_only = TRUE)
db<-kNN(db)
db<-db%>%select(-ends_with("_imp")) #Para eliminar las columnas adicionales que se generan en la imputación
db$lujo_si<-ifelse(db$carcatvalue==3,1,0)
db$lujo_si<-as.factor(db$lujo_si)
write.csv(db,"db_clean.csv")
db_num<-db %>% dplyr::select(where(is.numeric))
db_cat<-db %>% dplyr::select(where(is.factor))
par(mfrow=c(2,2))
for (i in 1:ncol(db_num)){
hist(db_num[[i]], main=paste("Plot ", colnames(db_num[i])), xlab = paste("Values Plot",i))
box(lty = "solid")
}
ggplot(db,aes(x=carcatvalue,y=carvalue,color=carcatvalue))+
geom_boxplot(outlier.colour = "black",notch = FALSE)+
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="gray", size=0.4, alpha=0.15)
std_values<-ddply(db,"carcatvalue",summarise,Min=min(carvalue),Max=max(carvalue),Mean=mean(carvalue),sd=sd(carvalue))
ggplot(db,aes(x=carvalue,color=carcatvalue))+geom_histogram(fill="white",alpha=0.5,position = "identity")+
geom_vline(data = std_values,aes(xintercept=Mean,color=carcatvalue),linetype="dashed")+
theme(axis.text.x = element_text(angle = 90,size = 10))
db%>%group_by(lujo_si)%>%summarise(mean(age),median(age),mean(ed))
db_lujo<-db %>% filter(lujo_si==1)
gender_table<-count(db_lujo,"gender")
all_lujo<-sum(gender_table$freq)
gender_table$percentage<-(gender_table$freq/all_lujo)*100
marital_table<-count(db_lujo,"marital")
marital_table$percentage<-(marital_table$freq/all_lujo)*100
ggplot(gender_table,aes(x="", y=percentage ,fill=gender))+
geom_bar(stat="identity")+
coord_polar("y",start=0)+
theme_void()
gender_table
ggplot(marital_table,aes(x="", y=percentage ,fill=marital))+
geom_bar(stat="identity")+
coord_polar("y",start=0)+
theme_void()
marital_table
db%>%group_by(lujo_si)%>%summarise(mean(income),mean(employ),mean(creddebt),mean(cardspent))
card_tb<-db%>%group_by(lujo_si,cardtype)%>%summarise(count=n())
cast(card_tb,cardtype~lujo_si,value = "count")
#Se dividen los datos para entrenamiento (75% de train y 25% de test)
set.seed(88)
split=sample.split(db$lujo_si,SplitRatio = 0.75)
#Crear el training y testing data sets
dt=subset(db,split==TRUE)  #Train
de=subset(db,split==FALSE) #Test
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+employ,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
elect<-db%>%group_by(lujo_si,ebill)%>%summarise(count=n())
cast(elect,cardtype~lujo_si,value = "count")
elect<-db%>%group_by(lujo_si,ebill)%>%summarise(count=n())
cast(elect,ebill~lujo_si,value = "count")
db%>%group_by(lujo_si)%>%summarise(mean(age),median(age),mean(ed),mean(spoused))
jcat<-db%>%group_by(lujo_si,jobcat)%>%summarise(count=n())
cast(jcat,jobcat~lujo_si,value = "count")
db%>%group_by(lujo_si)%>%summarise(mean(hourstv),mean(employ),mean(creddebt),mean(cardspent))
db%>%group_by(lujo_si)%>%summarise(mean(hourstv))
nw<-db%>%group_by(lujo_si,news)%>%summarise(count=n())
cast(nw,news~lujo_si,value = "count")
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+employ+news,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+employ,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+news,data=dt,family = binomial())
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+news,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+pets_dog,data=dt,family = binomial())
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+pets_dogs,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+pets_reptiles,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
sigmoide=function(x){1/(1+exp(-x))}
plot(predictions,sigmoide(predictions),col="blue")
mod_pred<-ifelse(predictions>0.5,1,0)
mod_pred<-factor(mod_pred)
head(mod_pred)
de$lujo_si<-factor(de$lujo_si)
head(de$lujo_si)
confusionMatrix(mod_pred,de$lujo_si)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+employ,data=dt,family = binomial())
summary(RL_Eur)
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+reptiles,data=dt,family = binomial())
RL_Eur<-glm(lujo_si~income+tollfree+cardtype+forward+ebill+cardspent+spoused+forward+jobcat+pets_reptiles,data=dt,family = binomial())
summary(RL_Eur)
predictions<-predict(RL_Eur,de)
library(DataExplorer) #para datos faltantes
library(VIM) #para imputación de datos faltantes
library(dplyr) #Para la manipulación de bases de datos
library(caTools) #Para predicción de datos
library(VIM) #para imputación de datos faltantes
library(randomForest)
library(tibble)
library(ggplot2)
library(tidyverse)
library(viridis)
library(plyr)
library(heatmaply)
library(caret)
library(reshape)
db<-read.csv("Base de datos caso práctico.csv")
#View(db)
dim(db)
summary(db)
n_occur<-data.frame(table(db$custid))
n_occur[n_occur$Freq>1,]
db$region<-as.factor(db$region)
db$townsize<-as.factor(db$townsize)
db$gender<-as.factor(db$gender)
db$agecat<-as.factor(db$agecat)
db$edcat<-as.factor(db$edcat)
db$jobcat<-as.factor(db$jobcat)
db$union<-as.factor(db$union)
db$empcat<-as.factor(db$empcat)
db$retire<-as.factor(db$retire)
db$inccat<-as.factor(db$inccat)
db$default<-as.factor(db$default)
db$jobsat<-as.factor(db$jobsat)
db$marital<-as.factor(db$marital)
db$spousedcat<-as.factor(db$spousedcat)
db$homeown<-as.factor(db$homeown)
db$hometype<-as.factor(db$hometype)
db$addresscat<-as.factor(db$addresscat)
db$carown<-as.factor(db$carown)
db$cartype<-as.factor(db$cartype)
db$carcatvalue<-as.factor(db$carcatvalue)
db$carbought<-as.factor(db$carbought)
db$carbuy<-as.factor(db$carbuy)
db$carcatvalue<-as.factor(db$carcatvalue)
db$commute<-as.factor(db$commute)
db$commutecat<-as.factor(db$commutecat)
db$commutecar<-as.factor(db$commutecar)
db$commuterail<-as.factor(db$commuterail)
db$commutebus<-as.factor(db$commutebus)
db$commutemotorcycle<-as.factor(db$commutemotorcycle)
db$commutepublic<-as.factor(db$commutepublic)
db$commutebike<-as.factor(db$commutebike)
db$commutewalk<-as.factor(db$commutewalk)
db$commutenonmotor<-as.factor(db$commutenonmotor)
db$telecommute<-as.factor(db$telecommute)
db$reason<-as.factor(db$reason)
db$birthmonth<-as.factor(db$birthmonth)
db$polview<-as.factor(db$polview)
db$ebill<-as.factor(db$ebill)
db$polparty<-as.factor(db$polparty)
db$vote<-as.factor(db$vote)
db$card<-as.factor(db$card)
db$cardtype<-as.factor(db$cardtype)
db$cardbenefit<-as.factor(db$cardbenefit)
db$card2<-as.factor(db$card2)
db$card2type<-as.factor(db$card2type)
db$card2benefit<-as.factor(db$card2benefit)
db$active<-as.factor(db$active)
db$bfast<-as.factor(db$bfast)
db$churn<-as.factor(db$churn)
db$tollfree<-as.factor(db$tollfree)
db$equip<-as.factor(db$equip)
db$callcard<-as.factor(db$callcard)
db$wireless<-as.factor(db$wireless)
db$wiremon<-as.factor(db$wiremon)
db$multline<-as.factor(db$multline)
db$voice<-as.factor(db$voice)
db$pager<-as.factor(db$pager)
db$internet<-as.factor(db$internet)
db$callid<-as.factor(db$callid)
db$forward<-as.factor(db$forward)
db$confer<-as.factor(db$confer)
db$owntv<-as.factor(db$owntv)
db$ownvcr<-as.factor(db$ownvcr)
db$owndvd<-as.factor(db$owndvd)
db$owncd<-as.factor(db$owncd)
db$ownpda<-as.factor(db$ownpda)
db$ownpc<-as.factor(db$ownpc)
db$ownipod<-as.factor(db$ownipod)
db$owngame<-as.factor(db$owngame)
db$ownfax<-as.factor(db$ownfax)
db$news<-as.factor(db$news)
db$card2fee<-as.factor(db$card2fee)
db$response_01<-as.factor(db$response_01)
db$response_02<-as.factor(db$response_02)
db$response_03<-as.factor(db$response_03)
db$polcontrib<-as.factor(db$polcontrib)
db$cardfee<-as.factor(db$cardfee)
db$commutecarpool<-as.factor(db$commutecarpool)
db$callwait<-as.factor(db$callwait)
db$ebill<-as.factor(db$ebill)
plot_missing(db,missing_only = TRUE)
db<-db[, colMeans(is.na(db)) <= .2]
dim(db)
plot_missing(db,missing_only = TRUE)
db<-kNN(db)
db<-db%>%select(-ends_with("_imp")) #Para eliminar las columnas adicionales que se generan en la imputación
db$lujo_si<-ifelse(db$carcatvalue==3,1,0)
db$lujo_si<-as.factor(db$lujo_si)
write.csv(db,"db_clean.csv")
db_num<-db %>% dplyr::select(where(is.numeric))
db_cat<-db %>% dplyr::select(where(is.factor))
par(mfrow=c(2,2))
for (i in 1:ncol(db_num)){
hist(db_num[[i]], main=paste("Plot ", colnames(db_num[i])), xlab = paste("Values Plot",i))
box(lty = "solid")
}
ggplot(db,aes(x=carcatvalue,y=carvalue,color=carcatvalue))+
